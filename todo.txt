Implement Greediness
    Easy to check when you change edge
    But consider the case where:
        Our next edge has a neighbour agent prior to where we would land from our residualMovement
        So we look-ahead on our A* route and curtail our movement accordingly
    But if we then change route at the junction anyway would it be right to curtail the residualMovement
    As afterall we are deciding not to go down the route which is the only thing curtailing us!

    In step() we perform "updateDistanceToNeighborino" before anything else, so we could replace
    that with a general lookAhead() which updatesDistanceTONeighbour but also makes mental note of whether we
    are changing route so taking this all into account

    Could   1) Check we would reach next junction
            2) Look ahead
            3) Move

Batch simulation
Data collection / analysis tools

Implement throttling & Contraflow

Implement user friendly parameter-input

Comment

Implement scheduling & routing





Make for nicer & easier setup
    Methodize setup.
        Move some setup into Car.init() ???
    Allow for parameterized map setup with a single method call
        Fields set up programattically

Easy experiment setup
 - Simple parameter change
 - Simple map style change

Customisable options in Mason window
    Population size
    car properties
    map type
    etcgit s

Tidy Car.java

Implement greediness

Implement throttling & Contraflow

Implement scheduling & routing

Implement user friendly features. Easier simulation setup.

Attempt to use GeoMason to read GIS data
    Handwrite a class which can convert GeoMason networks into plain MASON networks of junctions/roads
run some experimizzles

Comment everything you dummy